#include <iostream>

using namespace std;

#include "Diagram.h"

set<string>::iterator it;

Diagram::Diagram()
{

}

Diagram::~Diagram()
{

}

void Diagram::setLabel(string label)
{
  diagramLabel = label;
}

bool Diagram::setContours(set<string> c)
{
  contours.clear();
  contours = c;

  return true;
}

bool Diagram::setSelectedZones(vector<Zone> z)
{
  zones.clear();
  zones = z;

  return true;
}

bool Diagram::setAllZones(vector<Zone> z)
{
  allZones.clear();
  allZones = z;

  return true;
}

bool Diagram::setShadedZones(vector<Zone> sz)
{
  shadedZones.clear();
  shadedZones = sz;

  return true;
}
string Diagram::getLabel()
{
  return diagramLabel;
}
set<string> Diagram::getContours()
{
  return contours;
}

vector<Zone> Diagram::getAllZones()
{
  return allZones;
}

vector<Zone> Diagram::getSelectedZones()
{
  return zones;
}

vector<Zone> Diagram::getShadedZones()
{
  return shadedZones;
}

void Diagram::displayLabel()
{
  cout << diagramLabel << endl;
}

void Diagram::displayContours()
{
  for (it = contours.begin(); it != contours.end() ;it++)
    cout<<*it << " -- " ;

  cout <<  endl;
}

void Diagram::displaySelectedZones()
{
  for(int i=0 ;i< zones.size(); i++)
    {
      string p = createPair(zones[i].getZoneIn(), zones[i].getZoneOut());
      cout<< p << endl;
    }

}
void Diagram::displayAllZones()
{
  for(int i=0 ;i< allZones.size(); i++)
    {
      string p = createPair(allZones[i].getZoneIn(), allZones[i].getZoneOut());
      cout<< p << endl;
    }
  
}

void Diagram::displayShadedZones()
{
  for(int i=0 ;i< shadedZones.size(); i++)
    {
      string p = createPair(shadedZones[i].getZoneIn(), shadedZones[i].getZoneOut());
      cout<< p << endl;
    }
}

string Diagram::printLabel()
{
  string str = "Label: ";

  str.append(diagramLabel + "\n");
  
  return str;
}

string Diagram::printContours()
{
  string str = "Contours: { ";
  for (it = contours.begin(); it != contours.end() ;it++)
    str.append( *it +  " , " );

  str.append( " } \n" );

  return str;
}

string Diagram::printSelectedZones()
{
  string str = "Selected Zones: { ";
  for(int i=0 ;i< zones.size(); i++)
    {
      string p = createPair(zones[i].getZoneIn(), zones[i].getZoneOut());
      str.append( p + "\n" ); 
    }

  str.append( " }  \n" );

  return str;
}
string Diagram::printAllZones()
{
  string str = "All Zones: { ";
  for(int i=0 ;i< allZones.size(); i++)
    {
      string p = createPair(allZones[i].getZoneIn(), allZones[i].getZoneOut());
      str.append( p + "\n" );
    }
  str.append( " } \n" );
  return str;
}

string Diagram::printShadedZones()
{
  string str = "ShadedZones: { ";

  for(int i=0 ;i< shadedZones.size(); i++)
    {
      string p = createPair(shadedZones[i].getZoneIn(), shadedZones[i].getZoneOut());
      str.append( p + "\n" );
    }
  str.append( " } \n" );
  return str;
}

string Diagram::printDiagram()
{
  string str = "";
  
  str.append( printLabel() + "\n" );
  str.append( printContours() + "\n" );
  str.append( printSelectedZones() + "\n" );
  str.append( printShadedZones() + "\n" );
  str.append( printAllZones() + "\n" );

  return str;
}
// Creates the pair 
string Diagram::createPair(string inc, string ex)
{
  string pair = "";
  pair = "(" + inc + " , " + ex + ")";  
  
  return pair;
}
